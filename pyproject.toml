[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mini-agent"
version = "1.0.0"
description = "A lightweight intelligent agent framework implementing the complete ReAct (Reasoning-Acting) pattern"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MiniAgent Contributors"}
]
maintainers = [
    {name = "MiniAgent Contributors"}
]
keywords = [
    "ai",
    "agent",
    "llm",
    "openai",
    "react",
    "intelligent-agent",
    "automation",
    "tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
]
requires-python = ">=3.8"
dependencies = [
    "openai>=1.10.0",
    "pydantic>=2.0.0"
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0"
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0"
]

[project.urls]
Homepage = "https://github.com/Jacob-liu1996/miniagent"
Documentation = "https://github.com/Jacob-liu1996/miniagent#readme"
Repository = "https://github.com/Jacob-liu1996/miniagent"
"Bug Tracker" = "https://github.com/Jacob-liu1996/miniagent/issues"
Changelog = "https://github.com/Jacob-liu1996/miniagent/blob/main/CHANGELOG.md"

[project.scripts]
mini-agent = "mini_agent.main_mini:main"

[tool.setuptools.packages.find]
include = ["mini_agent*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
mini_agent = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openai.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["mini_agent"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]